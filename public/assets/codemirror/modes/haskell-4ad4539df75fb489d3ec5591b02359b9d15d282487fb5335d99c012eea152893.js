!function(t){"object"==typeof exports&&"object"==typeof module?t(require("../../lib/codemirror")):"function"==typeof define&&define.amd?define(["../../lib/codemirror"],t):t(CodeMirror)}(function(t){"use strict";t.defineMode("haskell",function(t,e){function n(t,e,n){return e(n),n(t,e)}function i(t,e){if(t.eatWhile(m))return null;var i=t.next();if(p.test(i)){if("{"==i&&t.eat("-")){var a="comment";return t.eat("#")&&(a="meta"),n(t,e,r(a,1))}return null}if("'"==i)return t.eat("\\")?t.next():t.next(),t.eat("'")?"string":"error";if('"'==i)return n(t,e,o);if(l.test(i))return t.eatWhile(f),t.eat(".")?"qualifier":"variable-2";if(s.test(i))return t.eatWhile(f),"variable";if(c.test(i)){if("0"==i){if(t.eat(/[xX]/))return t.eatWhile(u),"integer";if(t.eat(/[oO]/))return t.eatWhile(d),"number"}t.eatWhile(c);var a="number";return t.match(/^\.\d+/)&&(a="number"),t.eat(/[eE]/)&&(a="number",t.eat(/[-+]/),t.eatWhile(c)),a}if("."==i&&t.eat("."))return"keyword";if(h.test(i)){if("-"==i&&t.eat(/-/)&&(t.eatWhile(/-/),!t.eat(h)))return t.skipToEnd(),"comment";var a="variable";return":"==i&&(a="variable-2"),t.eatWhile(h),a}return"error"}function r(t,e){return 0==e?i:function(n,o){for(var a=e;!n.eol();){var s=n.next();if("{"==s&&n.eat("-"))++a;else if("-"==s&&n.eat("}")&&(--a,0==a))return o(i),t}return o(r(t,a)),t}}function o(t,e){for(;!t.eol();){var n=t.next();if('"'==n)return e(i),"string";if("\\"==n){if(t.eol()||t.eat(m))return e(a),"string";t.eat("&")||t.next()}}return e(i),"error"}function a(t,e){return t.eat("\\")?n(t,e,o):(t.next(),e(i),"error")}var s=/[a-z_]/,l=/[A-Z]/,c=/\d/,u=/[0-9A-Fa-f]/,d=/[0-7]/,f=/[a-z_A-Z0-9'\xa1-\uffff]/,h=/[-!#$%&*+.\/<=>?@\\^|~:]/,p=/[(),;[\]`{}]/,m=/[ \t\v\f]/,g=function(){function t(t){return function(){for(var e=0;e<arguments.length;e++)n[arguments[e]]=t}}var n={};t("keyword")("case","class","data","default","deriving","do","else","foreign","if","import","in","infix","infixl","infixr","instance","let","module","newtype","of","then","type","where","_"),t("keyword")("..",":","::","=","\\",'"',"<-","->","@","~","=>"),t("builtin")("!!","$!","$","&&","+","++","-",".","/","/=","<","<=","=<<","==",">",">=",">>",">>=","^","^^","||","*","**"),t("builtin")("Bool","Bounded","Char","Double","EQ","Either","Enum","Eq","False","FilePath","Float","Floating","Fractional","Functor","GT","IO","IOError","Int","Integer","Integral","Just","LT","Left","Maybe","Monad","Nothing","Num","Ord","Ordering","Rational","Read","ReadS","Real","RealFloat","RealFrac","Right","Show","ShowS","String","True"),t("builtin")("abs","acos","acosh","all","and","any","appendFile","asTypeOf","asin","asinh","atan","atan2","atanh","break","catch","ceiling","compare","concat","concatMap","const","cos","cosh","curry","cycle","decodeFloat","div","divMod","drop","dropWhile","either","elem","encodeFloat","enumFrom","enumFromThen","enumFromThenTo","enumFromTo","error","even","exp","exponent","fail","filter","flip","floatDigits","floatRadix","floatRange","floor","fmap","foldl","foldl1","foldr","foldr1","fromEnum","fromInteger","fromIntegral","fromRational","fst","gcd","getChar","getContents","getLine","head","id","init","interact","ioError","isDenormalized","isIEEE","isInfinite","isNaN","isNegativeZero","iterate","last","lcm","length","lex","lines","log","logBase","lookup","map","mapM","mapM_","max","maxBound","maximum","maybe","min","minBound","minimum","mod","negate","not","notElem","null","odd","or","otherwise","pi","pred","print","product","properFraction","putChar","putStr","putStrLn","quot","quotRem","read","readFile","readIO","readList","readLn","readParen","reads","readsPrec","realToFrac","recip","rem","repeat","replicate","return","reverse","round","scaleFloat","scanl","scanl1","scanr","scanr1","seq","sequence","sequence_","show","showChar","showList","showParen","showString","shows","showsPrec","significand","signum","sin","sinh","snd","span","splitAt","sqrt","subtract","succ","sum","tail","take","takeWhile","tan","tanh","toEnum","toInteger","toRational","truncate","uncurry","undefined","unlines","until","unwords","unzip","unzip3","userError","words","writeFile","zip","zip3","zipWith","zipWith3");var i=e.overrideKeywords;if(i)for(var r in i)i.hasOwnProperty(r)&&(n[r]=i[r]);return n}();return{startState:function(){return{f:i}},copyState:function(t){return{f:t.f}},token:function(t,e){var n=e.f(t,function(t){e.f=t}),i=t.current();return g.hasOwnProperty(i)?g[i]:n},blockCommentStart:"{-",blockCommentEnd:"-}",lineComment:"--"}}),t.defineMIME("text/x-haskell","haskell")});