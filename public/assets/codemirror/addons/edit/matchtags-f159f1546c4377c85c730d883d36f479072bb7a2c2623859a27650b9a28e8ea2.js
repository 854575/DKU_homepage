!function(t){"object"==typeof exports&&"object"==typeof module?t(require("../../lib/codemirror"),require("../fold/xml-fold")):"function"==typeof define&&define.amd?define(["../../lib/codemirror","../fold/xml-fold"],t):t(CodeMirror)}(function(t){"use strict";function e(t){t.state.tagHit&&t.state.tagHit.clear(),t.state.tagOther&&t.state.tagOther.clear(),t.state.tagHit=t.state.tagOther=null}function n(n){n.state.failedTagMatch=!1,n.operation(function(){if(e(n),!n.somethingSelected()){var i=n.getCursor(),s=n.getViewport();s.from=Math.min(s.from,i.line),s.to=Math.max(i.line+1,s.to);var r=t.findMatchingTag(n,i,s);if(r){if(n.state.matchBothTags){var a="open"==r.at?r.open:r.close;a&&(n.state.tagHit=n.markText(a.from,a.to,{className:"CodeMirror-matchingtag"}))}var o="close"==r.at?r.open:r.close;o?n.state.tagOther=n.markText(o.from,o.to,{className:"CodeMirror-matchingtag"}):n.state.failedTagMatch=!0}}})}function i(t){t.state.failedTagMatch&&n(t)}t.defineOption("matchTags",!1,function(s,r,a){a&&a!=t.Init&&(s.off("cursorActivity",n),s.off("viewportChange",i),e(s)),r&&(s.state.matchBothTags="object"==typeof r&&r.bothTags,s.on("cursorActivity",n),s.on("viewportChange",i),n(s))}),t.commands.toMatchingTag=function(e){var n=t.findMatchingTag(e,e.getCursor());if(n){var i="close"==n.at?n.open:n.close;i&&e.extendSelection(i.to,i.from)}}});